# -*- coding: utf-8 -*-
"""updated_utils

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vUIXMGE9w4LrO5rHPKhZSoiBmvXA_cau
"""

!ls '/content/drive/MyDrive/Team-Fermata-Energy/[EXTERNAL] breakthrough_tech_ai_f24/data'

from google.colab import drive
drive.flush_and_unmount()
drive.mount('/content/drive')

import os
import pandas as pd
import numpy as np

import metpy.calc as mpcalc # For calculating heat index.
from metpy.units import units

import holidays
import matplotlib.pyplot as plt

# Global Variables
PATH_EXTERNAL = "/content/drive/MyDrive/Team-Fermata-Energy/[EXTERNAL] breakthrough_tech_ai_f24/data"
PATH_INTERNAL = "/content/drive/MyDrive/Team-Fermata-Energy/processed_data"
BUILDING_PATH = PATH_EXTERNAL + "/building_data"

# Single Utils class definition
class Utils():
    def __init__(self, using_colab=True):
        if using_colab:
            try:
                drive.mount('/content/drive')
            except Exception as e:
                print(f"Failed to mount drive: {e}")

    def convert_column_to_datetime(self, df, column_name):
        """
        Converts the given column to datetime and sets it as the index of the dataframe.
        """
        try:
            df[column_name] = pd.to_datetime(df[column_name])
            df.set_index(column_name, inplace=True)
            return df
        except Exception as e:
            print(f"Error converting column to datetime: {e}")
            return df

    def load_to_fourier(self, df, column='out.electricity.total.energy_consumption', top_n=5):
        """
        Perform Fourier decomposition on the load data and keep the top N frequencies.
        """
        try:
            load_fft = fft.fft(df[column].values)
            frequencies = fft.fftfreq(len(load_fft))

            magnitudes = np.abs(load_fft)
            indices = np.argsort(magnitudes)[::-1]

            top_indices = indices[:top_n]
            filtered_fft = np.zeros_like(load_fft)
            filtered_fft[top_indices] = load_fft[top_indices]

            reconstructed_load = fft.ifft(filtered_fft).real
            df[f'reconstructed_{column}'] = reconstructed_load

            return df

        except Exception as e:
            print(f"Error during Fourier transformation: {e}")
            return None

utils = Utils()

# Example synthetic data: Let's create a time-series of 100 hourly points
df = pd.DataFrame({
    'timestamp': pd.date_range(start='1/1/2018', periods=100, freq='H'),
    'out.electricity.total.energy_consumption': np.sin(np.linspace(0, 10 * np.pi, 100)) + np.random.normal(0, 0.5, 100)
})

df = utils.convert_column_to_datetime(df, 'timestamp')

# Display the loaded data (before Fourier transformation)
print("Input Data:")
print(df.head())

# Now apply the Fourier transform to the load data
df_fourier = utils.load_to_fourier(df, column='out.electricity.total.energy_consumption', top_n=5)

print("\nReconstructed Data with Fourier Transformation:")
print(df_fourier[['out.electricity.total.energy_consumption', 'reconstructed_out.electricity.total.energy_consumption']].head())

plt.figure(figsize=(12, 6))

# Plot original data
plt.plot(df_fourier.index, df_fourier['out.electricity.total.energy_consumption'], label='Original Data', color='blue')

# Plot reconstructed data
plt.plot(df_fourier.index, df_fourier['reconstructed_out.electricity.total.energy_consumption'], label='Reconstructed Data (Top 5 Frequencies)', color='red', linestyle='--')

# Add title and labels
plt.title('Original vs. Reconstructed Load Data (Fourier Transformation)')
plt.xlabel('Time')
plt.ylabel('Load (Electricity Consumption)')
plt.legend()